// 1. Add these state variables at the top of your Pixora_Editor component (after existing useState declarations)

const [user, setUser] = useState(null); // GitHub user info

// 2. Add this useEffect to fetch GitHub user info (add after existing useEffects)

useEffect(() => {
  // Fetch user info from GitHub if token exists
  const token = localStorage.getItem("github_token");
  if (token) {
    axios
      .get("https://api.github.com/user", {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then(response => setUser(response.data))
      .catch(error => console.error("❌ Error fetching GitHub user:", error));
  }
}, []); // Run once on component mount

// 3. Add these GitHub handler functions (replace the existing handlePushToGithub function)

const handleGitHubConnect = useCallback(() => {
  const clientId = "Ov23lifnqo04raYYUC9r"; // Your GitHub OAuth App Client ID
  const redirectUri = "https://pixora-s-frontend.vercel.app/github-oauth-callback"; // Your callback URL

  window.location.href = `https://github.com/login/oauth/authorize?client_id=${clientId}&scope=repo&redirect_uri=${redirectUri}`;
}, []);

const handlePushToGitHub = useCallback(async () => {
  const token = localStorage.getItem("github_token");

  if (!token) {
    alert("Please connect to GitHub first.");
    return;
  }

  if (!user) {
    alert("Please connect to GitHub first.");
    return;
  }

  const repoName = "pixora-generated-code"; // Desired repo name
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  
  try {
    // Prepare files for GitHub
    const filesToPush = Object.entries(files).filter(([, file]) => file.code);
    
    if (filesToPush.length === 0) {
      alert("No code to push to GitHub.");
      return;
    }

    // Check if repo exists, if not create one
    let repoExists = true;
    try {
      await axios.get(`https://api.github.com/repos/${user.login}/${repoName}`, {
        headers: { Authorization: `token ${token}` },
      });
    } catch (repoError) {
      if (repoError.response && repoError.response.status === 404) {
        repoExists = false;
        // Create repository
        await axios.post(
          `https://api.github.com/user/repos`,
          {
            name: repoName,
            description: "Code generated by Pixora AI",
            private: false,
          },
          {
            headers: { Authorization: `token ${token}` },
          }
        );
      } else {
        throw repoError;
      }
    }

    // Push each file to GitHub
    for (const [filename, file] of filesToPush) {
      if (!file.code) continue;
      
      const cleanFilename = filename.startsWith('/') ? filename.slice(1) : filename;
      const filePath = `pixora-project-${timestamp}/${cleanFilename}`;
      const content = btoa(unescape(encodeURIComponent(file.code))); // Proper Base64 encoding for UTF-8

      await axios.put(
        `https://api.github.com/repos/${user.login}/${repoName}/contents/${filePath}`,
        {
          message: `Added Pixora generated code: ${timestamp}`,
          content,
        },
        {
          headers: { Authorization: `token ${token}` },
        }
      );
    }

    alert(`✅ Code pushed to GitHub successfully!\nRepository: ${user.login}/${repoName}`);
  } catch (error) {
    console.error("❌ Error pushing code to GitHub:", error);
    alert("❌ Failed to push code to GitHub. Please try again.");
  }
}, [files, user]);

// 4. Update the GitHub button in the header section
// Replace the existing GitHub button object in the action buttons array with:

{
  icon: Github,
  action: user ? handlePushToGitHub : handleGitHubConnect,
  title: user ? "Push to GitHub" : "Connect to GitHub",
  gradient: user 
    ? "from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700"
    : "from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700"
}

// 5. Add this import at the top of your file (if not already present)

import axios from "axios";

// 6. Optional: Add GitHub user info display in the header
// You can add this after the time display in the header right section:

{user && (
  <div className={`flex items-center space-x-2 px-3 py-2 rounded-xl ${isDarkMode ? 'bg-slate-700' : 'bg-slate-100'}`}>
    <img
      src={user.avatar_url}
      alt="GitHub Avatar"
      className="w-6 h-6 rounded-full"
    />
    <span className={`text-sm font-medium ${isDarkMode ? 'text-slate-300' : 'text-slate-700'}`}>
      {user.login}
    </span>
  </div>
)}

// 7. Enhanced Push to GitHub function with better error handling and progress indication

const handlePushToGitHub = useCallback(async () => {
  const token = localStorage.getItem("github_token");

  if (!token || !user) {
    alert("Please connect to GitHub first.");
    return;
  }

  // Show loading state
  const originalButtonText = "Pushing to GitHub...";
  
  const repoName = "pixora-generated-code";
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  
  try {
    const filesToPush = Object.entries(files).filter(([, file]) => file.code);
    
    if (filesToPush.length === 0) {
      alert("No code to push to GitHub.");
      return;
    }

    // Check/Create repository
    let repoUrl = "";
    try {
      const repoResponse = await axios.get(`https://api.github.com/repos/${user.login}/${repoName}`, {
        headers: { Authorization: `token ${token}` },
      });
      repoUrl = repoResponse.data.html_url;
    } catch (repoError) {
      if (repoError.response?.status === 404) {
        const newRepo = await axios.post(
          `https://api.github.com/user/repos`,
          {
            name: repoName,
            description: "Code generated by Pixora AI - Your intelligent code companion",
            private: false,
          },
          {
            headers: { Authorization: `token ${token}` },
          }
        );
        repoUrl = newRepo.data.html_url;
      } else {
        throw repoError;
      }
    }

    // Create a project folder with timestamp
    const projectFolder = `pixora-project-${timestamp}`;
    
    // Push files with progress tracking
    for (let i = 0; i < filesToPush.length; i++) {
      const [filename, file] = filesToPush[i];
      if (!file.code) continue;
      
      const cleanFilename = filename.startsWith('/') ? filename.slice(1) : filename;
      const filePath = `${projectFolder}/${cleanFilename}`;
      const content = btoa(unescape(encodeURIComponent(file.code)));

      await axios.put(
        `https://api.github.com/repos/${user.login}/${repoName}/contents/${filePath}`,
        {
          message: `✨ Pixora AI: ${cleanFilename} - Generated on ${new Date().toLocaleString()}`,
          content,
        },
        {
          headers: { Authorization: `token ${token}` },
        }
      );
    }

    // Show success with repository link
    if (window.confirm(`✅ Code pushed to GitHub successfully!\n\nRepository: ${user.login}/${repoName}\nProject: ${projectFolder}\n\nWould you like to view it on GitHub?`)) {
      window.open(`${repoUrl}/tree/main/${projectFolder}`, '_blank');
    }

  } catch (error) {
    console.error("❌ Error pushing code to GitHub:", error);
    
    let errorMessage = "❌ Failed to push code to GitHub.";
    if (error.response?.status === 401) {
      errorMessage += "\n\nAuthentication failed. Please reconnect to GitHub.";
      localStorage.removeItem("github_token");
      setUser(null);
    } else if (error.response?.status === 403) {
      errorMessage += "\n\nPermission denied. Please check your GitHub token permissions.";
    }
    
    alert(errorMessage);
  }
}, [files, user]);